module Synapse
  class Haproxy < Base
    attr_reader :opts
    def initialize(opts)
      super()

      %w{global defaults}.each do |req|
        raise ArgumentError, "haproxy requires a #{req} section" if !opts.has_key?(req)
      end

      @opts = opts
    end

    def generate_base_config()
      base_config = <<-EOC
        # auto-generated by synapse at #{Time.now}
        # this config needs haproxy-1.1.28 or haproxy-1.2.1
      EOC

      %w{global defaults}.each do |section|
        base_config << "\n#{section}\n"
        @opts[section].each do |option|
          base_config << "\t#{option}\n"
        end
      end

      return base_config
    end
    
    def generate_service_config(opts,backends)
      raise "you did not provide opts[:name]" if opts[:name].nil?
      raise "you did not provide opts[:listen]" if opts[:listen].nil?
      opts[:protocol] ||= 'http'
      opts[:balance] ||= 'roundrobin'

      backend_section = <<EOS
listen #{opts[:name]} #{opts[:listen]}
        mode #{opts[:protocol]}
        balance #{opts[:balance]}
EOS

      backends.each do |backend|
        raise "this backend does not have a name: #{backend.inspect}" unless backend[:name]
        raise "this backend does not have a host: #{backend.inspect}" unless backend[:host]
        raise "this backend does not have a port: #{backend.inspect}" unless backend[:port]

        backend_section << "        server #{backend[:name]} #{backend[:host]}:#{backend[:port]}\n"
      end
      backend_section << "\n"
      
      return backend_section
      
    end
  end
end
